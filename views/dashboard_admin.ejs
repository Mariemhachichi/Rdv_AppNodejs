<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau de bord Admin</title>
      <!-- Font Awesome CSS for icons -->
      <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- FullCalendar CSS -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css" rel="stylesheet">
    <!-- public/index.html -->

</head>
<body class="bg-light">

    <div class="d-flex" id="wrapper">
        <!-- Sidebar -->
        <div class="bg-dark text-white" id="sidebar" style="width: 250px; height: 100vh;">
            <div class="d-flex flex-column justify-content-between h-100 p-3 text-white bg-dark">
                <!-- Haut: Info utilisateur -->
                <div>
                  <div class="mb-4 text-center">
                    <i class="fas fa-user-circle fa-3x"></i>
                    <h5 class="mt-2"><%= user.name %></h5>
                    <span class="badge bg-secondary"><%= user.role %></span>
                  </div>
              
                  <!-- Navigation -->
                  <ul class="nav nav-pills flex-column mb-auto">
                    <li class="nav-item">
                      <a href="/dashboard/admin" class="nav-link text-white">
                        <i class="fas fa-home me-2"></i> Accueil
                      </a>
                    </li>
                    <li>
                      <a href="/rdvss" class="nav-link text-white">
                        <i class="fas fa-calendar-check me-2"></i> Rendez-vous
                      </a>
                    </li>
                    <li>
                      <a href="/calendar" class="nav-link text-white">
                        <i class="fas fa-calendar-alt me-2"></i> Calendrier
                      </a>
                    </li>
                  </ul>
                </div>
              
                <!-- Bas: Paramètres et Déconnexion -->
                <div class="border-top pt-3">
                    <a href="#" data-bs-toggle="modal" data-bs-target="#userSettingsModal" class="d-flex align-items-center text-white mb-2 text-decoration-none">
                        <i class="fas fa-cog me-2"></i> Paramètres
                      </a> 
                  </a>
                  <a href="/login" class="d-flex align-items-center text-white text-decoration-none">
                    <i class="fas fa-sign-out-alt me-2"></i> Déconnexion
                  </a>
                </div>
              </div>
              
        </div>

        <!-- Main content area -->
        <div id="page-content-wrapper" style="width: 100%;">
            <!-- Main Content -->
            <main class="container py-5">
                <!-- Statistics -->
                <div class="row mb-4">
                    <div class="col-md-3 mb-3">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">Total Utilisateurs</h5>
                                <p id="totalUsers" class="card-text h3">0</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">Professionnels</h5>
                                <p id="totalProfessionals" class="card-text h3">0</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">Clients</h5>
                                <p id="totalClients" class="card-text h3">0</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 mb-3">
                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h5 class="card-title">Total Rendez-vous</h5>
                                <p id="totalAppointments" class="card-text h3">0</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- FullCalendar -->
                <!-- <div class="card mb-4">
                    <div class="card-header d-flex justify-content-between">
                        <h5>Aperçu du Calendrier</h5>
                        <a href="/views/calendar" class="btn btn-primary btn-sm">Voir le calendrier complet</a>
                    </div>
                    <div class="card-body">
                        <div id="calendar"></div>
                    </div>
                </div> -->

                <!-- Appointments Table -->
                <!-- <div class="card shadow-sm mb-4">
                    <div class="card-header">
                        <h5>Rendez-vous récents</h5>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Client</th>
                                    <th>Professionnel</th>
                                    <th>Date & Heure</th>
                                    <th>Service</th>
                                    <th>Statut</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="appointmentsTable">
                               
                            </tbody>
                        </table>
                    </div>
                </div> -->

<!-- User Management Section -->
<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between">
        <h5>Gestion des utilisateurs</h5>
    </div>
    <div class="card-body d-flex">
        <!-- Graphique des utilisateurs -->
        <div style="width: 30%;">
            <h5>Statistiques des utilisateurs</h5>
            <canvas id="statsChart"></canvas>

        </div>
        <!-- Table des utilisateurs -->
        <div class="table-responsive" style="width: 70%; padding-left: 20px;">
            <div class="d-flex justify-content-end mb-3">
                <button id="addUserBtn" class="btn btn-primary">Ajouter un utilisateur</button>
              </div>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nom</th>
                        <th>Email</th>
                        <th>Rôle</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="usersTable">
                    <!-- Data will be injected here -->
                </tbody>
            </table>
        </div>
    </div>
</div>

            </main>
        </div>
    </div>
    <!-- Modal d'ajout d'utilisateur -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <form id="addUserForm" class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addUserModalLabel">Ajouter un utilisateur</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="name" class="form-label">Nom</label>
            <input type="text" class="form-control" id="name" required />
          </div>
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" required />
          </div>
          <div class="mb-3">
            <label for="role" class="form-label">Rôle</label>
            <select class="form-select" id="role" required>
              <option value="client">Client</option>
              <option value="professionel">Professionnel</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="password" class="form-label">Mot de passe</label>
            <input type="password" class="form-control" id="password" required />
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Ajouter</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        </div>
      </form>
    </div>
  </div>
  
  <!-- Modal de modification d'utilisateur -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <form id="editUserForm" class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editUserModalLabel">Modifier l'utilisateur</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="editUserId">
          <div class="mb-3">
            <label for="editName" class="form-label">Nom</label>
            <input type="text" class="form-control" id="editName" required>
          </div>
          <div class="mb-3">
            <label for="editEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="editEmail" required>
          </div>
          <div class="mb-3">
            <label for="editRole" class="form-label">Rôle</label>
            <select class="form-select" id="editRole" disabled>
              <option value="client">Client</option>
              <option value="professionnel">Professionnel</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="editPassword" class="form-label">Nouveau mot de passe (facultatif)</label>
            <input type="password" class="form-control" id="editPassword">
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Enregistrer</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        </div>
      </form>
    </div>
  </div>
  

  <!-- Modal Paramètres Utilisateur -->
<div class="modal fade" id="userSettingsModal" tabindex="-1" aria-labelledby="userSettingsModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <form class="modal-content" id="userSettingsForm">
        <div class="modal-header">
          <h5 class="modal-title" id="userSettingsModalLabel">Modifier mes informations</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="settingsUserId" value="<%= user._id %>">
  
          <div class="mb-3">
            <label for="settingsName" class="form-label">Nom</label>
            <input type="text" class="form-control" id="settingsName" value="<%= user.name %>" required>
          </div>
  
          <div class="mb-3">
            <label for="settingsEmail" class="form-label">Email</label>
            <input type="email" class="form-control" id="settingsEmail" value="<%= user.email %>" required>
          </div>
  
          <div class="mb-3">
            <label for="settingsPassword" class="form-label">Nouveau mot de passe (facultatif)</label>
            <input type="password" class="form-control" id="settingsPassword">
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">Enregistrer</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        </div>
      </form>
    </div>
  </div>
  
    <script>


// total user 
        fetch('/api/stats/users')
        .then(res => res.json())
        .then(data => {
            document.getElementById('totalUsers').textContent = data.total;
        })
        .catch(err => console.error('Erreur lors de la récupération des utilisateurs :', err));
//total clt
fetch('/api/stats/clients')
.then(res => res.json())
.then(data => {
    document.getElementById('totalClients').textContent = data.total;
})
.catch(err => console.error('Erreur lors de la récupération des clients :', err));
//total pro
fetch('/api/stats/professionnels')
.then(res => res.json())
.then(data => {
    document.getElementById('totalProfessionals').textContent = data.total;
})
.catch(err => console.error('Erreur lors de la récupération des professionnels :', err));
//total rdv
 fetch('/api/stats/rdv')
        .then(res => res.json())
        .then(data => {
            document.getElementById('totalAppointments').textContent = data.total;
        })
        .catch(err => console.error('Erreur lors de la récupération des rendez-vous :', err));
//table rdv
//fetch('/api/stats/rdvs')
//.then(res => res.json())
//.then(data => {
  //  const table = document.getElementById('appointmentsTable');
    //table.innerHTML = ''; // Vider le tableau

    //data.forEach(rdv => {
      //  const row = document.createElement('tr');

        //row.innerHTML = `
          //  <td>${rdv.client?.name || 'N/A'}</td>
            //<td>${rdv.professional?.name || 'N/A'}</td>
            //<td>${new Date(rdv.date).toLocaleString()}</td>
            //<td>${rdv.description || '-'}</td>
            //<td>${rdv.status}</td>
            //<td>
              //  <button class="btn btn-sm btn-danger">Supprimer</button>
            //</td>
        //`;

        //table.appendChild(row);
    //});
//})
//.catch(err => {
  //  console.error("Erreur lors du chargement des rendez-vous :", err);
//});

// Récupérer et afficher les utilisateurs
fetch('/api/stats/AllUsers')
    .then(res => res.json())
    .then(data => {
        console.log(data);  // Vérifie que tu reçois bien les utilisateurs
        const table = document.getElementById('usersTable');
        table.innerHTML = '';  // Vider le tableau avant de le remplir

        // Ajouter les utilisateurs dans le tableau
        data.users.forEach(user => {  // 'users' contient tous les utilisateurs
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${user.name}</td>
                <td>${user.email}</td>
                <td>${user.role}</td>
                <td>
                    <button class="btn btn-sm btn-warning edit-user-btn" data-user='${JSON.stringify(user)}'>Modifier</button>
                    <button class="btn btn-sm btn-danger delete-user-btn" data-user-id="${user._id}">Supprimer</button>
                </td>
            `;
            table.appendChild(row);
        });
    })
    .catch(err => {
        console.error('Erreur lors du chargement des utilisateurs :', err);
    });
//modal add
    document.getElementById('addUserBtn').addEventListener('click', () => {
        const addUserModal = new bootstrap.Modal(document.getElementById('addUserModal'));
        addUserModal.show();
    });
 //ajout user
 document.getElementById('addUserForm').addEventListener('submit', function (e) {
    e.preventDefault();

    const user = {
        name: document.getElementById('name').value,
        email: document.getElementById('email').value,
        role: document.getElementById('role').value,
        password: document.getElementById('password').value,
    };

    fetch('/users', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(user)
    })
    .then(res => {
        if (!res.ok) throw new Error("Erreur lors de l'ajout");
        return res.json();
    })
    .then(data => {
        alert('Utilisateur ajouté avec succès !');
        document.getElementById('addUserForm').reset();
        bootstrap.Modal.getInstance(document.getElementById('addUserModal')).hide();
        location.reload(); // recharge les données 
    })
    .catch(err => {
        console.error(err);
        alert('Erreur lors de l\'ajout de l\'utilisateur.');
    });
});
   //modif user
   document.addEventListener('click', function (e) {
    if (e.target.classList.contains('edit-user-btn')) {
      const user = JSON.parse(e.target.getAttribute('data-user'));
  
      document.getElementById('editUserId').value = user._id;
      document.getElementById('editName').value = user.name;
      document.getElementById('editEmail').value = user.email;
      document.getElementById('editRole').value = user.role;
      document.getElementById('editPassword').value = '';
  
      const editUserModal = new bootstrap.Modal(document.getElementById('editUserModal'));
      editUserModal.show();
    }
  });

  document.getElementById('editUserForm').addEventListener('submit', function (e) {
    e.preventDefault();
  
    const userId = document.getElementById('editUserId').value;
  
    const updatedUser = {
      name: document.getElementById('editName').value,
      email: document.getElementById('editEmail').value,
      role: document.getElementById('editRole').value
    };
  
    const newPassword = document.getElementById('editPassword').value;
    if (newPassword) {
      updatedUser.password = newPassword;
    }
  
    fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updatedUser)
    })
      .then(res => {
        if (!res.ok) throw new Error("Erreur lors de la modification");
        return res.json();
      })
      .then(data => {
        alert('Utilisateur modifié avec succès !');
        bootstrap.Modal.getInstance(document.getElementById('editUserModal')).hide();
        location.reload();
      })
      .catch(err => {
        console.error(err);
        alert('Erreur lors de la modification de l\'utilisateur.');
      });
  });
  //delete user
  document.addEventListener('click', function (e) {
    if (e.target.classList.contains('delete-user-btn')) {
      const userId = e.target.getAttribute('data-user-id');
  
      if (confirm("Êtes-vous sûr de vouloir supprimer cet utilisateur ?")) {
        fetch(`/user/${userId}`, {
          method: 'DELETE'
        })
        .then(res => {
          if (!res.ok) throw new Error("Erreur lors de la suppression");
          return res.json();
        })
        .then(data => {
          alert('Utilisateur supprimé avec succès.');
          location.reload();
        })
        .catch(err => {
          console.error(err);
          alert('Erreur lors de la suppression de l\'utilisateur.');
        });
      }
    }
  });
  
//modifier user conneceter
document.getElementById('userSettingsForm').addEventListener('submit', function (e) {
    e.preventDefault();
  
    const userId = document.getElementById('settingsUserId').value;
    const name = document.getElementById('settingsName').value;
    const email = document.getElementById('settingsEmail').value;
    const password = document.getElementById('settingsPassword').value;
  
    const updatedUser = { name, email };
    if (password) updatedUser.password = password;
  
    console.log('Données à envoyer :', updatedUser);

    fetch(`/users/${userId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updatedUser)
    })
      .then(res => {
        if (!res.ok) throw new Error("Erreur lors de la mise à jour");
        return res.json();
      })
      .then(data => {
        alert("Informations mises à jour !");
        bootstrap.Modal.getInstance(document.getElementById('userSettingsModal')).hide();
        location.reload();
      })
      .catch(err => {
        console.error(err);
        alert("Erreur lors de la mise à jour.");
      });
    
  });

   // Fonction pour récupérer les données depuis les API
   async function fetchData() {
    const users = await fetch('/api/stats/users').then(res => res.json());
    const clients = await fetch('/api/stats/clients').then(res => res.json());
    const professionals = await fetch('/api/stats/professionnels').then(res => res.json());
    const rdvs = await fetch('/api/stats/rdv').then(res => res.json());

    return {
        users: users.total,
        clients: clients.total,
        professionals: professionals.total,
        rdvs: rdvs.total
    };
}

// Fonction pour afficher le graphique avec les données récupérées
async function renderChart() {
    const data = await fetchData();

    const ctx = document.getElementById('statsChart').getContext('2d');
    const statsChart = new Chart(ctx, {
        type: 'bar',  // Type de graphique (barres)
        data: {
            labels: ['Utilisateurs', 'Clients', 'Professionnels', 'Rendez-vous'],
            datasets: [{
                label: 'Total',
                data: [data.users, data.clients, data.professionals, data.rdvs],  // Les vraies valeurs des API
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}

// Lancer la fonction pour afficher le graphique
renderChart();
  
    </script>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Chart.js  -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</body>
</html>
